{"version":3,"sources":["components/Conditions/Conditions.module.css","components/UV/UV.module.css","components/Emoji/Emoji.js","components/Conditions/Conditions.js","components/UV/UV.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Emoji","props","className","role","aria-label","label","aria-hidden","symbol","conditions","classes","Wrapper","error","Small","loading","Loader","responseObj","data","city_name","Math","round","uv","e","UV","useState","setResponseObj","city","setCity","setError","setLoading","onSubmit","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","process","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","textInput","value","onChange","target","Button","Conditions","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,2B,gBCArID,EAAOC,QAAU,CAAC,UAAY,sBAAsB,OAAS,qB,mJCW9CC,G,MAVD,SAAAC,GAAK,OACf,0BACIC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,QAEpCJ,EAAMM,U,uBCqBAC,EA3BI,SAACP,GAWhB,OACG,yBAAKC,UAAaO,IAAQC,SACrBT,EAAMU,OAAS,2BAAOT,UAAWO,IAAQG,OAA1B,8BACfX,EAAMY,SAAW,yBAAKX,UAAWO,IAAQK,QAAxB,cACjBb,EAAMc,YAAYC,KACf,6BACI,2BAAG,gCAASf,EAAMc,YAAYC,KAAK,GAAGC,YACtC,wDAA8BC,KAAKC,MAAMlB,EAAMc,YAAYC,KAAK,GAAGI,IAAnE,KACA,4BAlBUC,EAkBUpB,EAAMc,YAAYC,KAAK,GAAGI,KAjBhD,KAAOC,GAAK,IACV,6BACAA,GAAK,KAAOA,GAAK,IACjB,4BAEA,wEAcN,MApBT,IAAyBA,G,gBCqDdC,EArDJ,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACRR,EADQ,KACKS,EADL,OAESD,mBAAS,IAFlB,mBAERE,EAFQ,KAEFC,EAFE,OAGWH,oBAAS,GAHpB,mBAGRZ,EAHQ,KAGDgB,EAHC,OAIeJ,oBAAS,GAJxB,mBAIRV,EAJQ,KAICe,EAJD,KAmCb,OACI,6BACI,iDACA,0BAAMC,SAhCd,SAAeR,GAGX,GAFAA,EAAES,iBAEkB,IAAhBL,EAAKM,OACL,OAAOJ,GAAS,GAGpBA,GAAS,GACTH,EAAe,IACfI,GAAW,GAEX,IAAII,EAAiBC,mBAAmBR,GAExCS,MAAM,+CAAD,OAAgDF,EAAhD,gBAAsEG,qCAC1EC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,GAAIA,EAAS1B,MACT,MAAM,IAAI4B,MAEff,EAAea,GACfT,GAAW,MAEdY,OAAM,SAAAC,GACFd,GAAS,GACTC,GAAW,GACXc,QAAQC,IAAIF,EAAIG,cAQZ,2BAAOC,KAAK,OACZC,YAAY,aACZC,UAAU,KACV7C,UAAWO,IAAQuC,UACnBC,MAAOxB,EACPyB,SAAU,SAAC7B,GAAD,OAAOK,EAAQL,EAAE8B,OAAOF,UAElC,4BAAQ/C,UAAWO,IAAQ2C,OAAQP,KAAK,UAAxC,WAEJ,kBAACQ,EAAD,CAAYtC,YAAeA,EAAaJ,MAASA,EAAOE,QAAWA,M,MC/BhEyC,MAhBf,WACE,OACE,yBAAKpD,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEF,8BACE,kBAAC,EAAD,OAEF,8DAC6B,kBAAC,EAAD,CAAOK,OAAO,eAAKF,MAAM,iBCHxCkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA7B,GACL+B,QAAQ/B,MAAMA,EAAMiC,c","file":"static/js/main.15f01cb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1I6QR\",\"Small\":\"Conditions_Small__2U_6W\",\"Loader\":\"Conditions_Loader__2w4FE\",\"spin\":\"Conditions_spin__Q8Hhe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"UV_TextInput__19xt9\",\"Button\":\"UV_Button__3__rh\"};","import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\nexport default Emoji;","import React from 'react';\r\nimport classes from './Conditions.module.css'\r\n\r\nconst conditions = (props) => {\r\n    function getSunscreenMsg(e) {\r\n        if (e >= \"0\" && e <= \"2\") {\r\n            return \"No need to wear sunscreen!\";\r\n        } else if (e >= \"3\" && e <= \"7\") {\r\n            return \"Wear sunscreen and a hat!\";\r\n        } else {\r\n            return \"Stay inside or in the shade! Wear a hat, sunglasses, and sunscreen!\";\r\n        }\r\n    }\r\n\r\n    return (\r\n       <div className = {classes.Wrapper}>\r\n           {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\r\n           {props.loading && <div className={classes.Loader}>Loading...</div>}\r\n           {props.responseObj.data ?\r\n               <div>\r\n                   <p><strong>{props.responseObj.data[0].city_name}</strong></p>\r\n                   <p>The UV index is currently {Math.round(props.responseObj.data[0].uv)}.</p>\r\n                   <p>{getSunscreenMsg(props.responseObj.data[0].uv)}</p>\r\n               </div>\r\n           : null\r\n           }\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default conditions;","import React, {useState} from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport classes from './UV.module.css';\r\n\r\nconst UV = () => {\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [city, setCity] = useState('');\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n\r\n    function getUV(e) {\r\n        e.preventDefault();\r\n\r\n        if (city.length === 0) {\r\n            return setError(true);\r\n        }\r\n\r\n        setError(false);\r\n        setResponseObj({});\r\n        setLoading(true);\r\n\r\n        let uriEncodedCity = encodeURIComponent(city);\r\n\r\n        fetch(`https://api.weatherbit.io/v2.0/current?city=${uriEncodedCity}&key=${process.env.REACT_APP_API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            if (response.error) {\r\n                throw new Error()\r\n            }\r\n           setResponseObj(response);\r\n           setLoading(false);\r\n       })\r\n       .catch(err => {\r\n            setError(true);\r\n            setLoading(false);\r\n            console.log(err.message);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Find the UV index</h2>\r\n            <form onSubmit={getUV}>\r\n                <input type=\"text\"\r\n                placeholder=\"Enter city\"\r\n                maxLength=\"50\"\r\n                className={classes.textInput}\r\n                value={city}\r\n                onChange={(e) => setCity(e.target.value)}\r\n                />\r\n                <button className={classes.Button} type=\"submit\">Get UV</button>\r\n            </form>\r\n            <Conditions responseObj = {responseObj} error = {error} loading = {loading} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UV;","import React from 'react';\nimport Emoji from './components/Emoji/Emoji';\nimport UV from './components/UV/UV';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sun Shield</h1>\n      </header>\n      <main>\n        <UV />\n      </main>\n      <footer>\n        Made by a sunscreen junkie <Emoji symbol=\"ðŸ§´\" label=\"sunscreen\"/> \n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}