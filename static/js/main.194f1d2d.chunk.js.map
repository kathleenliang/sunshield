{"version":3,"sources":["components/Conditions/Conditions.module.css","components/UV/UV.module.css","components/Emoji/Emoji.js","components/Conditions/Conditions.js","components/UV/UV.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Emoji","props","className","role","aria-label","label","aria-hidden","symbol","Conditions","classes","Wrapper","error","Small","loading","Loader","responseObj","data","Math","round","uv","city_name","e","UV","useState","setResponseObj","city","setCity","setError","setLoading","href","onSubmit","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","process","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","TextInput","value","onChange","target","Button","onClick","latitude","longitude","disabled","geolocation","App","setGeolocation","navigator","getCurrentPosition","position","setState","status","localStorage","setItem","coords","alert","state","this","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,2B,gBCArID,EAAOC,QAAU,CAAC,UAAY,sBAAsB,OAAS,qB,2LCW9CC,EAVD,SAACC,GAAD,OACZ,0BACEC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,QAEpCJ,EAAMM,S,uBCwBIC,EA9BI,SAACP,GAWlB,OACE,yBAAKC,UAAWO,IAAQC,SACrBT,EAAMU,OACL,2BAAOT,UAAWO,IAAQG,OAA1B,8BAEDX,EAAMY,SAAW,yBAAKX,UAAWO,IAAQK,QAAxB,cACjBb,EAAMc,YAAYC,KACjB,6BACE,wDAC6BC,KAAKC,MAAMjB,EAAMc,YAAYC,KAAK,GAAGG,IAAK,IADvE,MAEMlB,EAAMc,YAAYC,KAAK,GAAGI,UAFhC,KAIA,4BAtBiBC,EAsBGpB,EAAMc,YAAYC,KAAK,GAAGG,KArB3C,KAAOE,GAAK,IACZ,iDACEA,GAAK,KAAOA,GAAK,IACnB,4BAEA,wEAkBH,MAxBR,IAAyBA,G,gBCqGZC,EApGJ,SAACrB,GAAW,IAAD,EACgBsB,mBAAS,IADzB,mBACfR,EADe,KACFS,EADE,OAEED,mBAAS,IAFX,mBAEfE,EAFe,KAETC,EAFS,OAGIH,oBAAS,GAHb,mBAGfZ,EAHe,KAGRgB,EAHQ,OAIQJ,oBAAS,GAJjB,mBAIfV,EAJe,KAINe,EAJM,KAgEpB,OACE,6BACE,wCACW,uBAAGC,KAAK,eAAR,KADX,4BACgE,IAC9D,kBAAC,EAAD,CAAOtB,OAAO,kBAEhB,8BACE,0BAAMuB,SAtCZ,SAAmBT,GAGjB,GAFAA,EAAEU,iBAEkB,IAAhBN,EAAKO,OACP,OAAOL,GAAS,GAGlBA,GAAS,GACTH,EAAe,IACfI,GAAW,GAEX,IAAIK,EAAiBC,mBAAmBT,GAExCU,MAAM,+CAAD,OAC4CF,EAD5C,gBACkEG,qCAEpEC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,GAAIA,EAAS3B,MACX,MAAM,IAAI6B,MAEZhB,EAAec,GACfV,GAAW,MAEZa,OAAM,SAACC,GACNf,GAAS,GACTC,GAAW,GACXe,QAAQC,IAAIF,EAAIG,cAYd,2BACEC,KAAK,OACLC,YAAY,eACZC,UAAU,KACV9C,UAAWO,IAAQwC,UACnBC,MAAOzB,EACP0B,SAAU,SAAC9B,GAAD,OAAOK,EAAQL,EAAE+B,OAAOF,UAEpC,8BACE,4BAAQhD,UAAWO,IAAQ4C,OAAQP,KAAK,UAAxC,UADF,eAKE,4BACE5C,UAAWO,IAAQ4C,OACnBC,QAjFZ,SAAsBjC,GACpBA,EAAEU,kBAEsB,IAApB9B,EAAMsD,WAAwC,IAArBtD,EAAMuD,YACjC7B,GAAS,GACTH,EAAe,IACfI,GAAW,GAEXO,MAAM,8CAAD,OAC2ClC,EAAMsD,SADjD,gBACiEtD,EAAMuD,UADvE,gBACwFpB,qCAE1FC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,GAAIA,EAAS3B,MACX,MAAM,IAAI6B,MAEZhB,EAAec,GACfV,GAAW,MAEZa,OAAM,SAACC,GACNf,GAAS,GACTC,GAAW,GACXe,QAAQC,IAAIF,EAAIG,cA4DZY,UAAWxD,EAAMyD,aAHnB,uBAUN,kBAAC,EAAD,CAAY3C,YAAaA,EAAaJ,MAAOA,EAAOE,QAASA,MClCpD8C,G,wDA5Db,WAAY1D,GAAQ,IAAD,8BACjB,cAAMA,IAYR2D,eAAiB,WAiBXC,UAAUH,YACZG,UAAUH,YAAYI,oBAjBR,SAACC,GACf,EAAKC,SAAS,CAAEC,OAAQ,aACxBC,aAAaC,QAAQ,oBAAoB,GACzC,EAAKH,SAAS,CACZT,SAAUQ,EAASK,OAAOb,SAC1BC,UAAWO,EAASK,OAAOZ,UAC3BE,aAAa,OAIH,WACZ,EAAKM,SAAS,CACZN,aAAa,OAOfW,MAAM,kDA/BR,EAAKC,MAAQ,CACXf,UAAW,EACXC,WAAY,EACZE,aAAa,GALE,E,gEAUjBa,KAAKX,mB,+BA4BL,OACE,yBAAK1D,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEF,8BACE,kBAAC,EAAD,CACEqD,SAAUgB,KAAKD,MAAMf,SACrBC,UAAWe,KAAKD,MAAMd,UACtBE,YAAaa,KAAKD,MAAMZ,eAG5B,4BAAQc,GAAG,cAAX,qHAEkD,IAChD,kBAAC,EAAD,CAAOjE,OAAO,eAAKF,MAAM,oB,GAtDjBoE,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd/C,OAAM,SAAA9B,GACLgC,QAAQhC,MAAMA,EAAMkC,c","file":"static/js/main.194f1d2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1I6QR\",\"Small\":\"Conditions_Small__2U_6W\",\"Loader\":\"Conditions_Loader__2w4FE\",\"spin\":\"Conditions_spin__Q8Hhe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"UV_TextInput__19xt9\",\"Button\":\"UV_Button__3__rh\"};","import React from \"react\";\r\n\r\nconst Emoji = (props) => (\r\n  <span\r\n    className=\"emoji\"\r\n    role=\"img\"\r\n    aria-label={props.label ? props.label : \"\"}\r\n    aria-hidden={props.label ? \"false\" : \"true\"}\r\n  >\r\n    {props.symbol}\r\n  </span>\r\n);\r\nexport default Emoji;\r\n","import React from \"react\";\r\nimport classes from \"./Conditions.module.css\";\r\n\r\nconst Conditions = (props) => {\r\n  function getSunscreenMsg(e) {\r\n    if (e >= \"0\" && e <= \"2\") {\r\n      return \"No need to wear sunscreen, get some Vitamin D!\";\r\n    } else if (e >= \"3\" && e <= \"7\") {\r\n      return \"Wear a hat and sunscreen!\";\r\n    } else {\r\n      return \"Stay in the shade or inside! Wear a hat, sunglasses, and sunscreen.\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Wrapper}>\r\n      {props.error && (\r\n        <small className={classes.Small}>Please enter a valid city.</small>\r\n      )}\r\n      {props.loading && <div className={classes.Loader}>Loading...</div>}\r\n      {props.responseObj.data ? (\r\n        <div>\r\n          <p>\r\n            The UV index is currently {Math.round(props.responseObj.data[0].uv)}{\" \"}\r\n            in {props.responseObj.data[0].city_name}.\r\n          </p>\r\n          <p>{getSunscreenMsg(props.responseObj.data[0].uv)}</p>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conditions;\r\n","import React, { useState } from \"react\";\r\nimport Conditions from \"../Conditions/Conditions\";\r\nimport Emoji from \"../Emoji/Emoji\";\r\nimport classes from \"./UV.module.css\";\r\n\r\nconst UV = (props) => {\r\n  let [responseObj, setResponseObj] = useState({});\r\n  let [city, setCity] = useState(\"\");\r\n  let [error, setError] = useState(false);\r\n  let [loading, setLoading] = useState(false);\r\n\r\n  function getUVLongLat(e) {\r\n    e.preventDefault();\r\n\r\n    if (props.latitude !== -1 && props.longitude !== -1) {\r\n      setError(false);\r\n      setResponseObj({});\r\n      setLoading(true);\r\n\r\n      fetch(\r\n        `https://api.weatherbit.io/v2.0/current?lat=${props.latitude}&lon=${props.longitude}&key=${process.env.REACT_APP_API_KEY}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          if (response.error) {\r\n            throw new Error();\r\n          }\r\n          setResponseObj(response);\r\n          setLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          setError(true);\r\n          setLoading(false);\r\n          console.log(err.message);\r\n        });\r\n    }\r\n  }\r\n\r\n  function getUVCity(e) {\r\n    e.preventDefault();\r\n\r\n    if (city.length === 0) {\r\n      return setError(true);\r\n    }\r\n\r\n    setError(false);\r\n    setResponseObj({});\r\n    setLoading(true);\r\n\r\n    let uriEncodedCity = encodeURIComponent(city);\r\n\r\n    fetch(\r\n      `https://api.weatherbit.io/v2.0/current?city=${uriEncodedCity}&key=${process.env.REACT_APP_API_KEY}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (response.error) {\r\n          throw new Error();\r\n        }\r\n        setResponseObj(response);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError(true);\r\n        setLoading(false);\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Do I need<a href=\"#disclaimer\">*</a> to wear sunscreen today?{\" \"}\r\n        <Emoji symbol=\"ðŸŒž\" />\r\n      </h2>\r\n      <span>\r\n        <form onSubmit={getUVCity}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter a city\"\r\n            maxLength=\"50\"\r\n            className={classes.TextInput}\r\n            value={city}\r\n            onChange={(e) => setCity(e.target.value)}\r\n          />\r\n          <span>\r\n            <button className={classes.Button} type=\"submit\">\r\n              Search\r\n            </button>\r\n            &nbsp; OR &nbsp;\r\n            <button\r\n              className={classes.Button}\r\n              onClick={getUVLongLat}\r\n              disabled={!props.geolocation}\r\n            >\r\n              Current Location\r\n            </button>\r\n          </span>\r\n        </form>\r\n      </span>\r\n      <Conditions responseObj={responseObj} error={error} loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UV;\r\n","import React from \"react\";\nimport Emoji from \"./components/Emoji/Emoji\";\nimport UV from \"./components/UV/UV\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: -1,\n      longitude: -1,\n      geolocation: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setGeolocation();\n  }\n\n  setGeolocation = () => {\n    const success = (position) => {\n      this.setState({ status: \"fetching\" });\n      localStorage.setItem(\"location-allowed\", true);\n      this.setState({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        geolocation: true,\n      });\n    };\n\n    const error = () => {\n      this.setState({\n        geolocation: false,\n      });\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sun Shield</h1>\n        </header>\n        <main>\n          <UV\n            latitude={this.state.latitude}\n            longitude={this.state.longitude}\n            geolocation={this.state.geolocation}\n          />\n        </main>\n        <footer id=\"disclaimer\">\n          * Disclaimer: If you chemically exfoliate, have sensitive skin, or\n          have health concerns, sunscreen is recommended!{\" \"}\n          <Emoji symbol=\"ðŸ§´\" label=\"sunscreen\" />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}